// [1] continue; :가장 가까운 for문의 증감식으로 코드흐름(눈에 안보임) 이동

for(let i =1 ; i <=5 ; i++){// i는 1부터 5이하까지 1씩 증가 반복한다.

    //만약에 i가 3이면 continue
    if(i == 3) {continue;}  //여기서 3일때 continue에 넣어지고 만나면 가장 가까운 증감식으로 그냥 이동
    // 즉] continue 이후 코드는 실행되지 않는다.
    //그래서 12x45만 출력된다


    console.log(i); // 12345가 순서대로 출력된다.

}//for end

//[2] break; : 가장 가까운 for문의 {} 종료/탈출/끝내기
for(let i =1 ; i <= 10; i++) {// i는 1부터 10이하 까지 1씩 증가 반복한다.

    if(i==5){break;} //코드흐름이 break 만나면 가장 가까운 반복문 종료
    // 즉] break 이후 반복문 코드는 실행되지 않는다. 

    console.log(i); // 1 2 3 4 가 순서대로 출력된다.

}//for end

//[3] 무한루프 : 종료되는 조건이 없이 계속적으로 반복되는 구조, 메모리 과부하.

//for(;;) {
    //prompt('무한입력:')
    //console.log('무한출력')   /* 하면 무한으로 출력됨 다만 웹에서는 쓸일이 많지는 않음  */

//}//for end

//(실습1) 6개의 정수를 입력받아 하나의 배열에 저장하시오.
    // - 조건1 : 배열내 중복은 없어야 한다.
    // - 조건2 : 배열내 개수가 6개가 되면 프로그램 종료 한다.

/* let 정수 = prompt('입력해주세요 :');
let 정수 = prompt('입력해주세요 :');
let 정수 = prompt('입력해주세요 :');
let 정수 = prompt('입력해주세요 :');
let 정수 = prompt('입력해주세요 :');
let 정수 = prompt('입력해주세요 :'); */

// 받았다 그리고 넣는다. 이부분 코드로 가능
// 하나의 배열에 저장한다. 코드가능
// push 를 어떻게 넣어야할지 모르겠다.
// 중복이 없어야하니 continue 반복문을 쓰면된다.
//다만 break도 들어가야하니 중복문으로 쓴다.
// 

let numArray = [] ; //입력받은 데이터를 저장하는 배열 선언 
for( ;;) {// 무한루프 start

    //(1)무한입력
    let num = Number(prompt('수입력 : '))     // 이거 안떠올랐음
    //(2)처리 : 배열저장 , 중복검사 , 개수체크
        // 1. 중복검사 .indexOF('찾을데이터) : 배열내 찾을데이터가 존재하면 인덱스 반환 없으면 -1
        if(numArray.indexOf(num) != -1) {//indexOf의 활용즉 개념을 찾아봐야할듯  //만약에 배열내 입력받은 값이 존재하면
            alert('중복입니다.'); //alert() : HTML 알람메시지 함수
            continue; // 가장 가까운 for의 증감식으로 이동 // 아래코드는 실행되지 않는다.

        }     //if end
        //2. 배열저장 .push(새로운값) : 배열내 마지막 인덱스에 새로운 값 추가 함수
    numArray.push(num);
    //3. 개수체크 .length : 배열내 요소의 개수/ 총길이 반환 속성
    if(numArray.length >=6) {//만약에 배열의 총길이(요소개수)가ㅏ 6개 이상이면
        break;//가장 가까운 for의 {}종료한다. for 강제종료/탈출

    }//if end

}// 무한루프 for  end
//<----break 여기로 이동
console.log(numArray);




for( let i = 1; i<=6; i++) {

}




