// 10 , 유재석 , true

/* JS의 데이터 기본타입
    1. 문자열(String) : "" 또는 ''또는 ``(백틱-키보드TAB) 
       10 vs "10" : 자료는 10같다. 자료의 타입은 다르다.
       예] '안녕하세요' , "유재석" ,'<div></div>'
    
    2. 숫자(Number)
        예] 10, 7, 3.14
    
        3. 불리언(Boolean)
        예]true 또는 false

    - 변수 (변하는수) vs 상수(고정된 수)  
    1. 하나의 자료/데이터(참조값, 리터럴 위치)를 저장할 수 있는 메모리 공간
    2. let 키워드, const 키워드   
    3. 메모리 공간, 상징적인 이름 = 변수명 
    
    리터럴 : 데이터/ 자료 그 자체 뜻, 숫자 10,"김", 'a'
        - 각 언어들을 미리 정의해두고 동일한 데이터. 자료를 참조해야 사용하는 방법
        - 메모리 (저장소) 효율성 극대화 하기 위해서
        - 예]
            let 변수1 = 10
            let 변수2 = 10 ---> 변수1 과 변수2는 같은 값/ 자료를 참조한다. 값/자료 1개 ----->객체지향


                개념 추가
클래스(Class) - 같은 종류(또는 문제 해결을 위한)의 집단에 속하는 속성(attribute)과 행위(behavior)를 정의한 것으로 객체지향 프로그램의 기본적인 사용자 정의 데이터형(user defined data type)이라고 할 수 있다. 
클래스는 다른 클래스 또는 외부 요소와 독립적으로 디자인하여야 한다. 
프로그래머는 아니지만 해결해야 할 문제가 속하는 영역에 종사하는 사람이라면 클래스를 사용할 수 있다.

객체(Object) - 클래스의 인스턴스(실제로 메모리상에 할당된 것)이다.      ------- 리터럴을 말하는걸 알수있다.
객체는 자신 고유의 속성(attribute)을 가지며 클래스에서 정의한 행위(behavior)를 수행할 수 있다. 
객체의 행위는 클래스에 정의된 행위에 대한 정의를 공유함으로써 메모리를 경제적으로 사용한다.

메서드(Method), 메시지(Message) - 클래스로부터 생성된 객체를 사용하는 방법으로서 객체에 명령을 내리는 메시지라 할 수 있다. 
메서드는 한 객체의 서브루틴(subroutine) 형태로 객체의 속성을 조작하는 데 사용된다. 
또 객체 간의 통신은 메시지를 통해 이루어진다.


*/

10  //숫자 타입의 자료
"안녕하세요"    //문자열 타입의 자료
true        //불리언타입


let 숫자상자 = 10 // 숫자 타입의 자료를 '숫자상자' 변수의 저장
    // let 숫자상자 = 10 ---> 메모리(컴퓨터 기억하는곳) 2개( 10데이터가 저장된 메모리(리터럴) , 숫자상자 (변수) 메모리)

    


let 문자열상자 = "안녕하세요" // 문자열 타입의 자료를 '문자열상자' 변수의 저장
let 불리언상자 = true; //불리언 타입의 자료를 '불리언상자' 라는 변수에 저장

//[1] 변수 선언 하는 방법
    //1. let : 변수 선언시 사용되는 키워드(미리만들어진 단어 , 리터럴)
    //2. 변수명 : 저장된 데이터/자료를 저장하는 메모리의 상징적인 이름( ex) 식별- class,id)
    //          - 중복 불가능, 숫자로 시작x , 띄어쓰기(_로 사용하기)
    //3. = : 대입 , 오른쪽 항(값)을 왼쪽 항(값) 대입하는 연산자(키워드)
    //4. 리터럴 / 값 : 변수에 대입할 리터럴/값 그자체 또는 객체(주소값)

let 변수상자1 = 10;
//[2] 변수 사용하는 이유 : 값을 저장하기 위해서 , 이유 재사용 하기 위해서 (값 저장, 값 재사용), 그 자체 값(리터럴)에 의미 부여
// 중간계산 기억을 위해서
console.log(10);
console.log(변수상자1)
변수상자1 = 20;
변수상자1 = 20 + 10; // 2- + 10 했을때 새로운 리터럴 30 대입한다. 10,20이 30이되서 사라지는게 아니다

//[3] 변수의 값 변경 하기
    //  1. 변경할 변수명 = 새로운 값     : 변경할 변수명 = 새로운값

변수상자1 = "유재석";
console.log( 변수상자1)

//[4] 변수의 연산
let 점수1 = 10
let 점수2 = 20
let 결과 = 점수1 + 점수2 // * html/css는 코드가 보이는게 다
    // 명령어 처리 순서
    // 1. = 대입 기준으로 오른쪽 먼저 처리, 점수1 + 점수2
    // 2. '점수1' 변수가 가진 값을 호출/반환 , 10 + 점수2
    // 3. '점수2' 변수가 가진 값을 호출/ 반환 , 10 + 20
    // 4. 더하기 연산, = 30 
    // 5. 변수의 메모리 공간 호출, let 결과 = 30
    // 6. 대입 연산자, 결과 (30)
    점수2 = 100; // 점수2 변수의 값 수정
    console.log(결과); // 30(v) vs 110   30이 나옴

    //[5] 변수의 값이 대입되지 않을때
    let 이름;
    console.log(이름) // 'undefined' 타입, 변수의 값을 초기화 

//[6] 상수 만들기
    // 1. const : 상수 만들기 위한 키워드
    // 2. 상수명 :
    // 3. =
    // 4. 리터럴
const 고정상자 = '안녕하세요'
//[7] 상수 수정 불가능
고정상자 = 10; // Assignment to constant variable