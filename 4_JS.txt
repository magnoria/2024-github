
컴퓨터 언어화 (컴파일/인터프리터/브라우저)

포트폴리오 주제 아이디어 /특색 찾아보기
기술 면접/ 테스트

[웹 프로그래밍 언어]
    -HTML(문자) : 하이퍼텍스트 마크업 언어 = 뼈대
    -css(문자) : 캐스케스팅 스타일 시트 언어 = 옷 HTML 없이 독단적으로 실행 불가능
    - js(문자,숫자,불리언,객체) : 자바 스크립트 언어   = 이벤트/행동  HTML 없이 독단적으로 실행 불가능
        HTML(CSS포함, JS 포함)


    [JS]
        -2009년이후 node.js 나오면서 백엔드 역할 가능해졌다. 인기 상승
        1. 웹 프로그래밍(html,css,js)
        2. 웹 서버(node.js vs JAVA)
        3. 앱 (REACT.JS NATIVE vS JAVA)
        4. thvmxmdnpdj (NW.JS)
            ---> 스타트업(소규모 프로젝트)

[ JS 적용하는 방법]
    1. body 마크업에 script 라는 마크업을 사용
         <script>
        console.log('[1]안녕 JS')
        </script>
    2 JS파일 생성하여 HTML 에서 임포트(불러오기)사용
        < head> 마크업 안에서 <script src='JS파일경로'>
          <script src="1_JS시작.js"></script>

    [JS 주석]
        1. /**/ 여러줄 주석
        2. //한줄 주석

    [리터럴] 
    - 키보드로 부터 직접 입력한 값 그 자체  (어딘가에 이미 저장된 자료)

    [변수]
        - 하나의 자료/ 데이터를 저장하는 메모리 공간
        1. 변수 만들기
            1. let 
            2. 변수명
            3.=
            4. 리터럴/ 값
            let 변수명 = 리터럴

        2. 변수 값 호출
            변수명
        
        3. 변수의 값 수정
            변수명 = 새로운값

        4. 변수의 연산
            let 변수명A = 변수명B + 10    

        5. 변수의 초기화 , 변수가 생성될때 처음에 대입되는 작업/행위
            1. let 변수명 = 리터럴;
            2. let 변수명;          <-------------undefined(값이 없다.)

[배열]
    1. 순서대로 번호가 붙인 원소 들이 연속적인 형태로 구성된 데이터 타입

    let 변수 = [ 1,2,3] (변수가 하나를 참조하고 배열이 3개를 참조한다.)
    
    2. 인덱스 ? 순서대로 배정된 번호, 0번 시작 , 길이 / 총개수 : 3개 이면 인덱스 0 1 2 
    3. 배열 선언 : []대괄호  / (쉼표)를 이용한 값을 구분하여 열거한다.
        let 변수명 = [값1 , 값2, 값3]
    4. 배열전체 호출 : 배열변수명
    5. 배열내 특정한 위치의 요소(값) 호출  : 배열변수명[인덱스]
    6. 배열수정
        1. 전체 수정 : 배열변수명 = [새로운 배열]
        2. 특정한 위치의 요소(값) 수정 : 배열변수명 [인덱스] = 새로운값
    
    7. 배열내 요소 추가 : 
    .push(새로운값)   - 마지막 인덱스에 삽입
        .splice (삽입할인덱스, 0 , 새로운값)    - 중간삽입
    8. 배열내 요소 삭제 : .splice(삭제할인덱스, 삭제개수)

    9. 배열내 요소찹기 :
    .indexOf(찾을데이터) , 배열내 찾을 데이터가 존재하면 인덱스 반환 없으면 -1 반환

[문자열]
    1. ""vs '' vs `` 으로 감싼 자료의 타입 
    2. 이스케이프/제어 문자
        1. \n 줄바꿈, 2. \t 들여쓰기 , 3. \" 큰따옴표 출력, 4. \'작은따음표출력 5.\\ 백슬래시 출력

    3. `백틱 템플릿 : 문자열 사이에 변수호출과 연산을 연결하는 문자열 구조 , 선언부 제외 (let 등)
        `문자열a ${변수호출} ${연산} ${함수호출}문자열b` 

[연산자]   - 암기필요
    1. 산술연산자 : + - *곱하기 /나누기 %나머지
    2. 연결연산자 : +연결 문자열과 문자열끼리 연결
    3. 비교연산자 : >초과 <미만>= 이상   <=이하  == 같다 !=다르다  ===(값/타입)같다  !==(값/타입)다르다
    4. 관계연산자 : &&이면서 ||이거나 !부정
    5.(복합)대입연산자 : =대입 += -= *= /= %=
    6. 증감연산자 : 변수++ , ++변수 , 변수--, --변수
    7. 삼항연산자 : 조건문 ? 참 : 거짓


// 따로 메모장에 빼놓을것
[ 함수 ]
    - 함(상자) 수(숫자) : 상자 안에 들어있는 수 -> 미리 상자에 넣어둔 수 -> 미리 상자에 넣어둔 코드들
    -> 코드/수 를 미리 넣어두고 다시 쓸려고
    변수 -데이터 저장 , 함수 -코드를 저장
    - js회사에서 미리 만든 코드들을 일반 개발자들에게 편리하게 기능을 제공하는 키워드
    - 매개변수(인자값/ 들어가는값) 와 반환(결과값/나오는값)
    -라이브러리 (함수의 집합)


[입출력 관련 함수]
    1. console.log()        : 정의 : [console]탭 출력 하는 함수 : 매개변수 : 출력할 데이터 / 반환값 :x
    2. document.write()     : 정의 : HTML body마크업 출력하는 함수 / 매개변수 :출력할 데이터 / 반환값 :x
    3. prompt()             : 정의 : HTML 알림창으로 부터 입력받은 함수 / 매개변수 : 알람메시지 / 반환값 : (String) 입력받은값

[탑입 변환 함수]
    1. Number()             : 정의 : 숫자타입으로 변환 함수 / 매개변수 : 변환할 데이터 / 반환값 : 변환된 숫자데이터
    2. String()             : 정의 : 문자열타입으로 변환 함수 / 매개변수 : 변환할 데이터 / 반환값 : 변환된 문자열 데이터
    3. parseInt()           : 정의 : 정수타입으로 변환 함수 / 매개변수 : 변환할 데이터 / 반환값 : 변환된 정수데이터


[조건문]
    - 조건결과에 따른 흐름 제어 , 컴퓨터가 논리적인 사고력이 없기 때문에 논리적인 사고력을 넣어준다.
    - ex] 내가 돈이 10000원이 있으면 택시를 탄다. 아니면 걸어간다.
    - 예] if(돈 >= 10000){ 택시를 탄다; } else { 걸어간다;}




[반복문]
    1. 조건 충족할때 특정 범위내 코드를 반복 실행
    2. 형태
        for (초기값 ; 조건문 ; 증감식) {
            실행문;
        }
        1. 초기값 : 반복을 할때 반복의 카운터 하는 변수의 처음값
        2. 조건문 : 반복실행문이 샐행되는 조건으로 true 이면 {실행문} false 이면 for 종료
        3. 증감심 : 반복변수의 증가 혹은 감소 변화 연산식 
        4. 실행문 : 조건문이 true 일때 실행할 코드
    
    3. 배열과 반복문 관계
        1. 배열은 인덱스가 0 부터 마지막 인덱스까지 1씩 증가
        2. 배열의 길이 = 배열명.length , 마지막인덱스 = 배열명,length - 1
        3. 배열 순회 : 배열내 모든 요소를 하나씩 호출하는 작업
            for( let index = 0; index <= 배열명.length - 1 ; index++) {
                배열명[index];
            }
    
    4. for 중첩

        형태
    for1() {
        for2() {
            for3(){

            }
        }
    }

    5. 키워드
        1. continue : 가장 가까운 for문의 증감식으로 코드 흐름이동
        2. break : 가장 가까운 for문의 {}종료/탈출한다.
    
    6. 무한루프
        for(;;){}


[함수]
    1. 변수 - 데이터를 저장 / 함수 - 명령어를 저장     , 미리 명령어(코드)들을 정의하는 구조
    2. 함수 사용 종류
        1. 라이브러리 : 내가 아닌 다른 사람이 만든 함수들, console.log() , document.querySelector() 등등
        2. 정의함수 : 내가 만든 함수
    3. JS함수 종류
        1. 선언적함수 : function 함수명(){}
        2. 익명함수 : function(){} , let 변수 = function(){}
        3. *화살표(람다) 함수* : () => {} , let 변수 = () => {}
    4. 선언적함수 만드는 방법
        1. function :함수를 만들기 위한 함수 선언 키워드
        2. 함수명 : 관례적으로 카멜표기법(mycar -> myCar , studentScoreList)
        3. (매개변수1, 매개변수2) : 매개(중매 매)변수 , 함수 호출시 인자값을 매개변수에 대입
        4. {}               : 함수 호출/ 실행시 실행되는 코드들
        5. return           : 함수가 종료되면서 호출했ㄷ전곳으로 반환값, 무조건 1개 자료
    5. 함수 호출하는 방법
        1. js에서 호출하는 방법 : 함수명(인자값1 , 인자값2) , let 리더턴값 = 함수명( 인자값1 , 인자값2)
        2. html 에서 호출 하는 방법 : <마크업 onclick="함수명(인자값1,인자값2)">          인자값이 있으면 넣고 없으면 인자값은 안넣어도 된다.            

    6. 함수 사용 특징
        1. 코드(명령어) 재활용/ 사용 , 동일한 코드를 여러번 사용시 효율성이 좋다.
        2. 미리 정의된 코드의 인자값(매개변수)에 따른 서로 다른 결과(리턴값) 얻을수 있다.
        3. 지역변수 : 함수내 선언된 변수는 실행도중에만 메모리가 할당되고 함수가 종료되면 지역변수 초기화(리턴값)
    7. html 마크업 이벤트 속성
        - <마크업 onXXXX="Js코드" />
        1. onclick : 마크업을 클릭했을때 실행되는 js코드



- 프로그래밍 관점 : 객체 지향 vs 절차지향

객체 [Object]
    - 주체(subject) : 중심이되는 것 
    - 객체(Object) : 중심외의 물건 또는 다른 실체
    - 객체지향 프로그래밍
        - 객체를 중심으로 하는 프로그래밍 패러다임
        - 주체(개발자) <------------------> 객체(컴퓨터)
            즉] 내가아닌 컴퓨터에서 어떠한 실체물을 만들어낸 것들은 모두 객체
        
    
    - 컴퓨터속 객체
        - 고유한 속성 또는 행동을 가진다.
        - 물리적으로 존재하거나 논리(추상)적으로 존재하는 것들
        - 인기가 많은 이유 : 세상에 모든 것들의 (성질/행동) 디지털화 할 수 있기 때문
        - 객체지향 프로그래밍 언어 : JSON, JAVA, PYTHON, C# 등등

    1. JS객체 :
        1. 클래스 기반의(class-Object) 객체
        2. 클래스가 없는 (class-free Object) 객체
        즉 ] JS는 클래스(설계도) 있어도 없어도 객체 생성이 가능하다.

    2. JS 객체 형태 : {속성명 : 값, 속성명 : 값, 속성명 : 값}
        -{ }중괄호를 이용한 {} 1개 하나의 객체로 취급하고 각 속성들은 , (쉼표)로 
        구분한다.

        - 속성 : 객체가 갖는 고유한 성질 , 데이터/값, 
            - 속성명에는 변수명과 같이 상직적인 이름 역할
            - 속성명과 매칭하여 데이터/값 또는 함수 또는 배열, 객체
            - 속성명 과 속성의 값을 :(콜론)한쌍으로 구성

            속성은 결국 그 코드가 갖는 값 또는 데이터, 실행하는 것을 표현한것

    3. JS 선언
        1. let/const
        2. 변수명
        3. =
        4. {}

    4. JS객체호출
        - 객체{}를 갖는 변수를 호출한다.
        - 변수명

    5. 변수와 객체와 객체속성 관계
        - {} : 자료의 타입으로 구성된 데이터(객체) 1개
        - let 변수 = { } : 변수가 데이터(객체) 1개를 참조한다.
        - let 변수 = {속성명 : 데이터, 속성명 : 데이터} : 변수가 데이터(객체) 1개를
        참조하고 객체가 각 속성들을 참조한다.

    6. 객체가 속성들을 참조/추적 하는 방법
        - .(점) : 접근 연산자 로써 객체내 속성에 접근/호출 할때 사용되는 연산자/특수문자
        - 객체. 속성명 , 변수명, 속성명
            변수는 메모리공간 , 변수명은 변수를 지칭하는 명

        ex) console.log -> console이라는 객체가 log를 참조한다.
            참조 ] 
                - 변수의 값 호출 하는 법 :(정의) let 변수명 = 10; (호출) 변수명;
                    - 배열 : (정의) let 변수명 = [ ] (호출) 변수명;
                    - 객체 : (정의) let 변수명 = { } (호출) 변수명;
                - 함수의 호출 하는법 : (정의) function함수명(){} (호출) 함수명();

    7. 객체내 속성을 다루는 방법
        1. 객체내 속성값 호출
            변수명.속성명
        2. 객체내 속성 생성
            변수명.새로운속성명 = 새로운데이터
        3. 객체내 속성값 수정
            변수명.기존속성명 = 새로운 데이터
        4. 객체내 속성값 삭제
            delete 변수명.속성명;
    
    8. 객체내 속성이 가질수 있는 타입 [모두]
        let 변수명 = { 
            속성명 : 리터럴(문자열, 숫자, 불리언 등등) 데이터
            속성명 : [] ,
            속성명 : function(){},
            속성명 : {}
        }
        즉] 객체내 모든 타입의 데이터들을 가질 수 있다.

    9. 



